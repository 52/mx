#!/usr/bin/env bash
#
# USAGE:
#   trace [-h|--help] LEVEL MESSAGE
#
# OPTIONS:
#   -h, --help    -- Displays this help message.
#
# LEVELS:
#   --info        -- Prints an info message.
#   --debug       -- Prints a debug message.
#   --error       -- Prints an error message.
# 

# Color used for [INFO] messages.
COLOR_GREEN='\033[0;32m'

# Color used for [DEBUG] messages.
COLOR_BLUE='\033[0;34m'

# Color used for [ERROR] messages.
COLOR_RED='\033[0;31m'

# Reset color to the default.
COLOR_RESET='\033[0m'

# Prints an [INFO] message with a timestamp.
# Usage: 'info "Hello, world!"'
function info() {
  if [ -z "$1" ]; then
    echo "Error: No argument provided to 'info'"
    return 1
  fi
  
  local timestamp
  timestamp=$(date '+%Y-%m-%d %H:%M:%S')
  echo -e "${COLOR_GREEN}[${timestamp}] [INFO]:${COLOR_RESET} $1"
}

# Prints an [DEBUG] message with a timestamp.
# Usage: 'debug "Hello, world!"'
function debug() {
  if [ -z "$1" ]; then
    echo "Error: No argument provided to 'debug'"
    return 1
  fi

  local timestamp
  timestamp=$(date '+%Y-%m-%d %H:%M:%S')
  echo -e "${COLOR_BLUE}[${timestamp}] [DEBUG]:${COLOR_RESET} $1"
}

# Prints an [ERROR] message with a timestamp.
# Usage: 'error "Hello, world!"'
function error() {
  if [ -z "$1" ]; then
    echo "Error: No argument provided to 'error'"
    return 1
  fi
  
  local timestamp
  timestamp=$(date '+%Y-%m-%d %H:%M:%S')
  >&2 echo -e "${COLOR_RED}[${timestamp}] [ERROR]:${COLOR_RESET} $1"
}

# Only run if the script is executed.
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then

  # Set the log level. (INFO / DEBUG / ERROR)
  LOG_LEVEL=""

  # Parse the command line options.
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -h|--help)
        sed -n '2,/^$/s/^# \?//p' "$0"
        exit 0
        ;;
      --info)
        LOG_LEVEL="info"
        shift
        break
        ;;
      --debug)
        LOG_LEVEL="debug"
        shift
        break
        ;;
      --error)
        LOG_LEVEL="error"
        shift
        break
        ;;
      *)
        error "Unknown option '$1'"
        exit 1
        ;;
    esac
  done

  # Assert that a level was specified.
  if [[ -z "$LOG_LEVEL" ]]; then
    error "No level specified, exiting process..."
    exit 1
  fi

  # Get the message from the remaining arguments.
  MESSAGE="$*"

  # Execute the logging command.
  case "$LOG_LEVEL" in
    info)
      info "$MESSAGE"
      ;;
    debug)
      debug "$MESSAGE"
      ;;
    error)
      error "$MESSAGE"
      ;;
  esac

fi
